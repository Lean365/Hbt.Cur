<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lean.Hbt.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler">
            <summary>
            JWT令牌处理器实现
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler._configuration">
            <summary>
            配置接口
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置接口</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.GenerateToken(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            生成JWT令牌
            </summary>
            <param name="userId">用户ID</param>
            <param name="userName">用户名</param>
            <param name="roles">用户角色列表</param>
            <returns>JWT令牌字符串</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.ValidateToken(System.String)">
            <summary>
            验证JWT令牌
            </summary>
            <param name="token">JWT令牌字符串</param>
            <returns>验证通过返回声明主体，否则返回null</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Authentication.IHbtJwtHandler">
            <summary>
            JWT令牌处理器接口
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.IHbtJwtHandler.GenerateToken(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            生成JWT令牌
            </summary>
            <param name="userId">用户ID</param>
            <param name="userName">用户名</param>
            <param name="roles">用户角色列表</param>
            <returns>JWT令牌字符串</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.IHbtJwtHandler.ValidateToken(System.String)">
            <summary>
            验证JWT令牌
            </summary>
            <param name="token">JWT令牌字符串</param>
            <returns>验证通过返回声明主体，否则返回null</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager">
            <summary>
            缓存配置管理器
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtCacheOptions},Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager.GetCurrentOptionsAsync">
            <summary>
            获取当前配置
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager.UpdateOptionsFromDatabaseAsync">
            <summary>
            从数据库更新配置
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtCacheFactory">
            <summary>
            缓存工厂实现
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Caching.HbtCacheFactory.Memory">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Caching.HbtCacheFactory.Redis">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtCacheFactory.#ctor(Lean.Hbt.Domain.IServices.IHbtMemoryCache,Lean.Hbt.Domain.IServices.IHbtRedisCache)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache">
            <summary>
            内存缓存实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            设置缓存
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.Exists(System.String)">
            <summary>
            判断缓存是否存在
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.SearchKeys(System.String)">
            <summary>
            根据模式搜索键
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.GetOrAdd``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            获取或添加缓存
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtRedisCache">
            <summary>
            Redis缓存实现
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Caching.HbtRedisCache._cache">
            <summary>
            分布式缓存接口
            </summary>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Caching.HbtRedisCache._connection">
            <summary>
            连接到Redis服务器
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,StackExchange.Redis.ConnectionMultiplexer)">
            <summary>
            构造函数
            </summary>
            <param name="cache">分布式缓存接口</param>
            <param name="connection">连接到Redis服务器</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            设置缓存
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="expiry">过期时间</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.GetAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <returns>缓存值，不存在返回默认值</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.RemoveAsync(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">缓存键</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.ExistsAsync(System.String)">
            <summary>
            判断缓存是否存在
            </summary>
            <param name="key">缓存键</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.SearchKeysAsync(System.String)">
            <summary>
            根据模式搜索键
            </summary>
            <param name="pattern">搜索模式</param>
            <returns>匹配的键列表</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.#ctor(Microsoft.Extensions.Options.IOptions{SqlSugar.ConnectionConfig},Lean.Hbt.Domain.IServices.IHbtLogger)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.Client">
            <summary>
            获取数据库客户端
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.BeginTran">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.CommitTran">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.RollbackTran">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.InitializeAsync">
            <summary>
            初始化数据库
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.SetTenantId">
            <summary>
            设置租户ID
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.AddTenantFilter">
            <summary>
            添加租户过滤器
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Data.Contexts.HbtTenantContext">
            <summary>
            租户上下文,用于存储当前租户信息
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Data.Contexts.HbtTenantContext.CurrentTenantId">
            <summary>
            获取当前租户ID
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtTenantContext.Clear">
            <summary>
            清除当前租户信息
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Data.Contexts.IHbtDbContext">
            <summary>
            数据库上下文接口
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Data.Contexts.IHbtDbContext.Client">
            <summary>
            获取SqlSugar客户端
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.IHbtDbContext.BeginTran">
            <summary>
            开启事务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.IHbtDbContext.CommitTran">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.IHbtDbContext.RollbackTran">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed">
            <summary>
            数据库种子数据初始化
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.#ctor(Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext,Lean.Hbt.Domain.IServices.IHbtLogger)">
            <summary>
            构造函数
            </summary>
            <param name="context">数据库上下文</param>
            <param name="logger">日志记录器</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeAsync">
            <summary>
            初始化种子数据
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeTenantAsync">
            <summary>
            初始化租户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeRoleAsync">
            <summary>
            初始化角色
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeUserAsync">
            <summary>
            初始化用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeDeptAsync">
            <summary>
            初始化部门
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializePostAsync">
            <summary>
            初始化岗位
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeSysConfigAsync">
            <summary>
            初始化系统配置
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions">
            <summary>
            服务集合扩展
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddInfrastructure(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加基础设施服务
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Logging.HbtNLogger">
            <summary>
            NLog日志实现
            </summary>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Logging.HbtNLogger._logger">
            <summary>
            NLog日志记录器
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Debug(System.String)">
            <summary>
            记录调试级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Debug(System.String,System.Object[])">
            <summary>
            记录带参数的调试级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Info(System.String)">
            <summary>
            记录信息级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Info(System.String,System.Object[])">
            <summary>
            记录带参数的信息级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Warn(System.String)">
            <summary>
            记录警告级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Warn(System.String,System.Object[])">
            <summary>
            记录带参数的警告级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Error(System.String)">
            <summary>
            记录错误级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Error(System.String,System.Exception)">
            <summary>
            记录带异常的错误级别日志
            </summary>
            <param name="message">日志消息</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Error(System.String,System.Object[])">
            <summary>
            记录带参数的错误级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Fatal(System.String)">
            <summary>
            记录致命错误级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Fatal(System.String,System.Exception)">
            <summary>
            记录带异常的致命错误级别日志
            </summary>
            <param name="message">日志消息</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Fatal(System.String,System.Object[])">
            <summary>
            记录带参数的致命错误级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1">
            <summary>
            SqlSugar通用仓储实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.#ctor(SqlSugar.SqlSugarScope)">
            <summary>
            构造函数
            </summary>
            <param name="db">SqlSugar客户端</param>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.SqlSugarClient">
            <summary>
            获取SqlSugar客户端
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.SimpleClient">
            <summary>
            获取SimpleClient对象
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.AsQueryable">
            <summary>
            获取查询对象
            </summary>
            <returns>返回ISugarQueryable查询对象</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetByIdAsync(System.Object)">
            <summary>
            根据主键获取实体
            </summary>
            <param name="id">主键值</param>
            <returns>返回实体对象,如果未找到返回null</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetListAsync">
            <summary>
            获取所有实体列表
            </summary>
            <returns>返回实体列表</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取实体列表
            </summary>
            <param name="condition">查询条件表达式</param>
            <returns>返回符合条件的实体列表</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetPagedListAsync(System.Int32,System.Int32)">
            <summary>
            分页查询所有数据
            </summary>
            <param name="pageIndex">页码(从1开始)</param>
            <param name="pageSize">每页记录数</param>
            <returns>返回分页结果(list:当前页数据,total:总记录数)</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetPagedListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <param name="condition">查询条件表达式</param>
            <param name="pageIndex">页码(从1开始)</param>
            <param name="pageSize">每页记录数</param>
            <returns>返回分页结果(list:当前页数据,total:总记录数)</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取第一个实体
            </summary>
            <param name="condition">查询条件</param>
            <returns>实体</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.InsertAsync(`0)">
            <summary>
            新增单个实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.InsertRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增实体
            </summary>
            <param name="entities">实体对象列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.UpdateAsync(`0)">
            <summary>
            更新单个实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.UpdateRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量更新实体
            </summary>
            <param name="entities">实体对象列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.DeleteAsync(System.Object)">
            <summary>
            根据主键删除
            </summary>
            <param name="id">主键值</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.DeleteAsync(`0)">
            <summary>
            删除单个实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.DeleteRangeAsync(System.Collections.Generic.List{System.Object})">
            <summary>
            根据主键批量删除
            </summary>
            <param name="ids">主键值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.DeleteRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量删除实体
            </summary>
            <param name="entities">实体对象列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtAuditsLog">
            <summary>
            审计日志实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.#ctor(Lean.Hbt.Domain.IServices.IHbtLogger,Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext)">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
            <param name="context"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.LogOperationAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            记录操作日志
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="module"></param>
            <param name="operation"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <param name="result"></param>
            <param name="elapsed"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.LogLoginAsync(System.Int64,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            记录登录日志
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="ipAddress"></param>
            <param name="userAgent"></param>
            <param name="result"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.LogExceptionAsync(System.Int64,System.String,System.String,System.String,System.Exception)">
            <summary>
            记录异常日志
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.GetClientIpAddress">
            <summary>
            获取客户端IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.GetUserAgent">
            <summary>
            获取客户端UserAgent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.Error(System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.Fatal(System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy">
            <summary>
            登录限制策略实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtLoginPolicyOptions},Lean.Hbt.Domain.IServices.IHbtRedisCache,Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="cache"></param>
            <param name="configRepository"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.ValidateLoginAttemptAsync(System.String)">
            <summary>
            验证登录尝试
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.RecordFailedLoginAsync(System.String)">
            <summary>
            记录登录失败
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.RecordSuccessfulLoginAsync(System.String)">
            <summary>
            记录登录成功
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.GetRemainingAttemptsAsync(System.String)">
            <summary>
            获取剩余尝试次数
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.GetLockoutRemainingMinutesAsync(System.String)">
            <summary>
            获取锁定时间
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.GetFailedAttemptsAsync(System.String)">
            <summary>
            获取失败尝试次数
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.LockAccountAsync(System.String)">
            <summary>
            锁定账户
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtOAuthService">
            <summary>
            OAuth服务实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtOAuthService.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtOAuthOptions},Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig},System.Net.Http.HttpClient)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtOAuthService.GetAuthorizationUrlAsync(System.String,System.String)">
            <summary>
            获取授权地址
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtOAuthService.HandleCallbackAsync(System.String,System.String,System.String)">
            <summary>
            处理OAuth回调
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy">
            <summary>
            密码策略实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtPasswordPolicyOptions},Lean.Hbt.Domain.IServices.IHbtRedisCache,Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="cache"></param>
            <param name="context"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.ValidatePasswordComplexity(System.String)">
            <summary>
            验证密码复杂度
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.ValidatePasswordHistoryAsync(System.Int64,System.String)">
            <summary>
            验证密码历史
            </summary>
            <param name="userId"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.RecordPasswordHistoryAsync(System.Int64,System.String)">
            <summary>
            记录密码历史
            </summary>
            <param name="userId"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.ValidatePasswordExpirationAsync(System.Int64)">
            <summary>
            验证密码过期
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.GetPasswordExpirationDaysAsync(System.Int64)">
            <summary>
            密码过期天数
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtSessionManager">
            <summary>
            会话管理实现
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtSessionOptions},Lean.Hbt.Domain.IServices.IHbtRedisCache,Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="cache"></param>
            <param name="configRepository"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.CreateSessionAsync(System.String,System.String,System.String,System.String)">
            <summary>
            创建会话
            </summary>
            <param name="userId">用户ID</param>
            <param name="userName">用户名</param>
            <param name="ipAddress">IP地址</param>
            <param name="userAgent">用户代理</param>
            <returns>会话ID</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.GetSessionInfoAsync(System.String)">
            <summary>
            获取会话信息
            </summary>
            <param name="sessionId">会话ID</param>
            <returns>会话信息</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.UpdateSessionAccessTimeAsync(System.String)">
            <summary>
            更新会话访问时间
            </summary>
            <param name="sessionId">会话ID</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.RemoveSessionAsync(System.String)">
            <summary>
            移除会话
            </summary>
            <param name="sessionId">会话ID</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.GetUserSessionsAsync(System.String)">
            <summary>
            获取用户所有会话
            </summary>
            <param name="userId">用户ID</param>
            <returns>会话列表</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.RemoveUserSessionsAsync(System.String)">
            <summary>
            移除用户所有会话
            </summary>
            <param name="userId">用户ID</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.SaveSessionInfoAsync(System.String,System.String,Lean.Hbt.Domain.Models.Identity.HbtSessionInfo)">
            <summary>
            保存会话信息
            </summary>
            <param name="userId">用户ID</param>
            <param name="sessionId">会话ID</param>
            <param name="sessionInfo">会话信息</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.AddToUserSessionsAsync(System.String,System.String)">
            <summary>
            添加到用户会话列表
            </summary>
            <param name="userId">用户ID</param>
            <param name="sessionId">会话ID</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.RemoveFromUserSessionsAsync(System.String,System.String)">
            <summary>
            从用户会话列表移除
            </summary>
            <param name="userId">用户ID</param>
            <param name="sessionId">会话ID</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.GetUserSessionIdsAsync(System.String)">
            <summary>
            获取用户会话ID列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>会话ID列表</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.SingleSignOutAsync(System.String,System.String)">
            <summary>
            单点登出
            </summary>
            <param name="userId">用户ID</param>
            <param name="excludeSessionId">排除的会话ID</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.CleanupExpiredSessionsAsync">
            <summary>
            清理过期会话
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.GetAllSessionsAsync">
            <summary>
            获取所有会话
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub">
            <summary>
            SignalR在线Hub
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-20
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub.#ctor(Lean.Hbt.Domain.Interfaces.SignalR.IHbtOnlineUserService)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub.OnConnectedAsync">
            <summary>
            连接建立时
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub.OnDisconnectedAsync(System.Exception)">
            <summary>
            连接断开时
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub.JoinGroup(System.String)">
            <summary>
            加入群组
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub.LeaveGroup(System.String)">
            <summary>
            离开群组
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub.SendToUser(System.Int64,System.String)">
            <summary>
            发送消息给指定用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub.SendToGroup(System.String,System.String)">
            <summary>
            发送消息给指定群组
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier">
            <summary>
            SignalR消息通知服务
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-20
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{Lean.Hbt.Infrastructure.SignalR.HbtOnlineHub,Lean.Hbt.Domain.Interfaces.SignalR.IHbtOnlineClient},Lean.Hbt.Domain.Interfaces.SignalR.IHbtOnlineUserService)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.NotifyUserAsync(System.Int64,System.String,Lean.Hbt.Common.Enums.HbtMessageType)">
            <summary>
            通知指定用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.NotifyGroupAsync(System.String,System.String,Lean.Hbt.Common.Enums.HbtMessageType)">
            <summary>
            通知指定群组
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.NotifyAllAsync(System.String,Lean.Hbt.Common.Enums.HbtMessageType)">
            <summary>
            通知所有用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.NotifyTenantAsync(System.Int64,System.String,Lean.Hbt.Common.Enums.HbtMessageType)">
            <summary>
            通知指定租户的所有用户
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Swagger.HbtSwaggerSetup">
            <summary>
            Swagger配置
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Swagger.HbtSwaggerSetup.AddHbtSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加Swagger服务
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Swagger.HbtSwaggerSetup.UseHbtSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用Swagger中间件
            </summary>
            <param name="app">应用程序构建器</param>
        </member>
    </members>
</doc>
