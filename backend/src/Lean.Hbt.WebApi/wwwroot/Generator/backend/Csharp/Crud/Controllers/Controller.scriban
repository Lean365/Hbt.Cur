#nullable enable

//===================================================================
// 项目名 : {{ table.controller_namespace }}
// 文件名 : {{ table.controller_class_name }}.cs
// 创建者 : Lean365
// 创建时间: {{ date }}
// 版本号 : V0.0.1
// 描述    : {{ table.comment }}控制器
//===================================================================

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Lean.Hbt.Common.Models;
using {{ table.dto_namespace }};
using {{ table.service_namespace }};

namespace {{ table.controller_namespace }};

/// <summary>
/// {{ table.comment }}控制器
/// </summary>
/// <remarks>
/// 创建者: Lean365
/// 创建时间: {{ date }}
/// </remarks>
[ApiController]
[Route("api/[controller]")]
public class {{ table.controller_class_name }} : ControllerBase
{
    private readonly {{ table.iservice_class_name }} _service;

    /// <summary>
    /// 构造函数
    /// </summary>
    /// <param name="service">服务</param>
    public {{ table.controller_class_name }}({{ table.iservice_class_name }} service)
    {
        _service = service;
    }

    /// <summary>
    /// 获取{{ table.comment }}列表
    /// </summary>
    /// <param name="query">查询参数</param>
    /// <returns>分页数据</returns>
    [HttpGet("list")]
    public async Task<HbtPagedResult<{{ table.dto_class_name }}>> GetListAsync([FromQuery] {{ table.dto_class_name }}QueryDto query)
    {
        return await _service.GetListAsync(query);
    }

    /// <summary>
    /// 获取{{ table.comment }}详情
    /// </summary>
    /// <param name="id">主键</param>
    /// <returns>详情数据</returns>
    [HttpGet("{id}")]
    public async Task<{{ table.dto_class_name }}> GetInfoAsync(long id)
    {
        return await _service.GetInfoAsync(id);
    }

    /// <summary>
    /// 创建{{ table.comment }}
    /// </summary>
    /// <param name="input">创建参数</param>
    /// <returns>主键</returns>
    [HttpPost]
    public async Task<long> CreateAsync([FromBody] {{ table.dto_class_name }}CreateDto input)
    {
        return await _service.CreateAsync(input);
    }

    /// <summary>
    /// 更新{{ table.comment }}
    /// </summary>
    /// <param name="input">更新参数</param>
    /// <returns>是否成功</returns>
    [HttpPut]
    public async Task<bool> UpdateAsync([FromBody] {{ table.dto_class_name }}UpdateDto input)
    {
        return await _service.UpdateAsync(input);
    }

    /// <summary>
    /// 删除{{ table.comment }}
    /// </summary>
    /// <param name="input">删除参数</param>
    /// <returns>是否成功</returns>
    [HttpDelete]
    public async Task<bool> DeleteAsync([FromBody] {{ table.dto_class_name }}DeleteDto input)
    {
        return await _service.DeleteAsync(input);
    }

    /// <summary>
    /// 导入{{ table.comment }}
    /// </summary>
    /// <param name="input">导入参数</param>
    /// <returns>是否成功</returns>
    [HttpPost("import")]
    public async Task<bool> ImportAsync([FromBody] List<{{ table.dto_class_name }}ImportDto> input)
    {
        return await _service.ImportAsync(input);
    }

    /// <summary>
    /// 导出{{ table.comment }}
    /// </summary>
    /// <param name="query">查询条件</param>
    /// <returns>Excel文件或zip文件</returns>
    [HttpGet("export")]
    public async Task<IActionResult> ExportAsync([FromQuery] {{ table.dto_class_name }}QueryDto query)
    {
        var result = await _service.ExportAsync(query);
        var contentType = result.fileName.EndsWith(".zip", StringComparison.OrdinalIgnoreCase)
            ? "application/zip"
            : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        Response.Headers["Content-Disposition"] = $"attachment; filename*=UTF-8''{Uri.EscapeDataString(result.fileName)}";
        return File(result.content, contentType, result.fileName);
    }

    /// <summary>
    /// 获取{{ table.comment }}模板
    /// </summary>
    /// <returns>模板数据</returns>
    [HttpGet("tpl")]
    public async Task<List<{{ table.dto_class_name }}TplDto>> GetTplAsync()
    {
        return await _service.GetTplAsync();
    }

    /// <summary>
    /// 更新{{ table.comment }}状态
    /// </summary>
    /// <param name="input">状态参数</param>
    /// <returns>是否成功</returns>
    [HttpPut("status")]
    public async Task<bool> UpdateStatusAsync([FromBody] {{ table.dto_class_name }}StatusDto input)
    {
        return await _service.UpdateStatusAsync(input);
    }

    /// <summary>
    /// 更新{{ table.comment }}排序
    /// </summary>
    /// <param name="input">排序参数</param>
    /// <returns>是否成功</returns>
    [HttpPut("sort")]
    public async Task<bool> UpdateSortAsync([FromBody] {{ table.dto_class_name }}SortDto input)
    {
        return await _service.UpdateSortAsync(input);
    }

    /// <summary>
    /// 审核{{ table.comment }}
    /// </summary>
    /// <param name="input">审核参数</param>
    /// <returns>是否成功</returns>
    [HttpPut("audit")]
    public async Task<bool> AuditAsync([FromBody] {{ table.dto_class_name }}AuditDto input)
    {
        return await _service.AuditAsync(input);
    }
} 