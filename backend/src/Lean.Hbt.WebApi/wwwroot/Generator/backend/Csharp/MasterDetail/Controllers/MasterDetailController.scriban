#nullable enable

using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Mapster;
using Lean.Hbt.Application.Dtos.{{ table.module_name }};
using Lean.Hbt.Application.Services.{{ table.module_name }};
using Lean.Hbt.Domain.IServices.Extensions;
using Lean.Hbt.Infrastructure.Security.Attributes;

namespace Lean.Hbt.WebApi.Controllers.{{ table.module_name }};

/// <summary>
/// {{ table.comment }}控制器
/// </summary>
[Route("api/[controller]", Name = "{{ table.comment }}")]
[ApiController]
[ApiModule("{{ table.module_name }}", "{{ table.module_comment }}")]
public class {{ pascal_case table.table_name }}Controller : HbtBaseController
{
    private readonly I{{ pascal_case table.table_name }}Service _service;

    public {{ pascal_case table.table_name }}Controller(
        I{{ pascal_case table.table_name }}Service service,
        IHbtLocalizationService localization)
        : base(localization)
    {
        _service = service;
    }

    [HttpGet("list")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:list")]
    public async Task<IActionResult> GetListAsync([FromQuery] {{ pascal_case table.table_name }}QueryDto query)
    {
        var result = await _service.GetListAsync(query);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.List.Success"));
    }

    [HttpGet("{id}")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:query")]
    public async Task<IActionResult> GetByIdAsync(long id)
    {
        var result = await _service.GetByIdAsync(id);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Get.Success"));
    }

    [HttpPost]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:create")]
    public async Task<IActionResult> CreateAsync([FromBody] {{ pascal_case table.table_name }}CreateDto input)
    {
        var result = await _service.CreateAsync(input);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Create.Success"));
    }

    [HttpPut]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:update")]
    public async Task<IActionResult> UpdateAsync([FromBody] {{ pascal_case table.table_name }}UpdateDto input)
    {
        var result = await _service.UpdateAsync(input);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Update.Success"));
    }

    [HttpDelete("batch")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:delete")]
    public async Task<IActionResult> DeleteAsync([FromBody] long[] ids)
    {
        var result = await _service.DeleteAsync(ids);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Delete.Success"));
    }

    [HttpGet("detail/list/{masterId}")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:query")]
    public async Task<IActionResult> GetDetailListAsync(long masterId)
    {
        var result = await _service.GetDetailListAsync(masterId);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Detail.List.Success"));
    }

    [HttpGet("detail/{id}")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:query")]
    public async Task<IActionResult> GetDetailByIdAsync(long id)
    {
        var result = await _service.GetDetailByIdAsync(id);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Detail.Get.Success"));
    }

    [HttpPost("detail")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:create")]
    public async Task<IActionResult> CreateDetailAsync([FromBody] {{ pascal_case table.table_name }}DetailCreateDto input)
    {
        var result = await _service.CreateDetailAsync(input);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Detail.Create.Success"));
    }

    [HttpPut("detail")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:update")]
    public async Task<IActionResult> UpdateDetailAsync([FromBody] {{ pascal_case table.table_name }}DetailUpdateDto input)
    {
        var result = await _service.UpdateDetailAsync(input);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Detail.Update.Success"));
    }

    [HttpDelete("detail/batch")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:delete")]
    public async Task<IActionResult> DeleteDetailAsync([FromBody] long[] ids)
    {
        var result = await _service.DeleteDetailAsync(ids);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Detail.Delete.Success"));
    }

    [HttpPost("import")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:import")]
    public async Task<IActionResult> ImportAsync(IFormFile file)
    {
        using var stream = file.OpenReadStream();
        var result = await _service.ImportAsync(stream, "Sheet1");
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Import.Success"));
    }

    [HttpGet("export")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:export")]
    public async Task<IActionResult> ExportAsync([FromQuery] {{ pascal_case table.table_name }}QueryDto query)
    {
        var result = await _service.ExportAsync(query, "Sheet1");
        return File(result, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "{{ table.comment }}数据.xlsx");
    }

    [HttpGet("template")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:import")]
    public async Task<IActionResult> GetTemplateAsync()
    {
        var result = await _service.GetTemplateAsync("Sheet1");
        return File(result, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "{{ table.comment }}导入模板.xlsx");
    }

    [HttpPut("{id}/status")]
    [HbtPerm("{{ table.module_name }}:{{ snake_case table.table_name }}:update")]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    public async Task<IActionResult> UpdateStatusAsync([FromBody] {{ pascal_case table.table_name }}StatusDto input)
    {
        var result = await _service.UpdateStatusAsync(input);
        return Success(result, _localization.L("{{ pascal_case table.table_name }}.Status.Success"));
    }
}