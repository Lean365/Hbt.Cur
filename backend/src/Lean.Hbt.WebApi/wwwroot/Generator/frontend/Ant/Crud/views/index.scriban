//===================================================================
// 项目名 : Lean.Hbt
// 文件名 : index.vue
// 创建者 : CodeGenerator
// 创建时间: {{ datetime }}
// 版本号 : v1.0.0
// 描述    : {{ table.comment }}管理页面
//===================================================================

<template>
  <div class="app-container">
    <!-- 搜索区域 -->
    <hbt-query
      v-model:show="showSearch"
      :query-params="queryParams"
      @query="handleQuery"
      @reset="resetQuery"
    >
      {{~ for column in table.columns ~}}
      {{~ if column.is_query ~}}
      {{~ if column.type == 'string' ~}}
      <el-form-item label="{{ column.comment }}" prop="{{ column.name }}">
        <el-input
          v-model="queryParams.{{ column.name }}"
          placeholder="请输入{{ column.comment }}"
          clearable
          @keyup.enter="handleQuery"
        />
      </el-form-item>
      {{~ else if column.type == 'number' ~}}
      <el-form-item label="{{ column.comment }}" prop="{{ column.name }}">
        <el-input-number
          v-model="queryParams.{{ column.name }}"
          :precision="{{ column.precision }}"
          :step="{{ column.step }}"
          :min="{{ column.min }}"
          :max="{{ column.max }}"
          placeholder="请输入{{ column.comment }}"
          clearable
        />
      </el-form-item>
      {{~ else if column.type == 'boolean' || column.type == 'enum' ~}}
      <el-form-item label="{{ column.comment }}" prop="{{ column.name }}">
        <hbt-select
          v-model="queryParams.{{ column.name }}"
          dict-type="{{ column.dict_type }}"
          type="{{ column.select_type }}"
          placeholder="请选择{{ column.comment }}"
          clearable
        />
      </el-form-item>
      {{~ else if column.type == 'date' ~}}
      <el-form-item label="{{ column.comment }}" prop="{{ column.name }}">
        <el-date-picker
          v-model="queryParams.{{ column.name }}"
          type="date"
          placeholder="请选择{{ column.comment }}"
          value-format="YYYY-MM-DD"
          clearable
        />
      </el-form-item>
      {{~ else if column.type == 'datetime' ~}}
      <el-form-item label="{{ column.comment }}" prop="{{ column.name }}">
        <el-date-picker
          v-model="queryParams.{{ column.name }}"
          type="datetime"
          placeholder="请选择{{ column.comment }}"
          value-format="YYYY-MM-DD HH:mm:ss"
          clearable
        />
      </el-form-item>
      {{~ end ~}}
      {{~ end ~}}
      {{~ end ~}}
    </hbt-query>

    <!-- 操作按钮区域 -->
    <hbt-toolbar
      :show-search="showSearch"
      @query-table="getList"
    >
      <el-button
        type="primary"
        plain
        icon="Plus"
        @click="handleAdd"
        v-hasPermi="['{{ table.module_name }}:{{ table.name }}:add']"
      >新增</el-button>
      <el-button
        type="success"
        plain
        icon="Edit"
        :disabled="single"
        @click="handleUpdate"
        v-hasPermi="['{{ table.module_name }}:{{ table.name }}:edit']"
      >修改</el-button>
      <el-button
        type="danger"
        plain
        icon="Delete"
        :disabled="multiple"
        @click="handleDelete"
        v-hasPermi="['{{ table.module_name }}:{{ table.name }}:remove']"
      >删除</el-button>
      <el-button
        type="warning"
        plain
        icon="Download"
        @click="handleExport"
        v-hasPermi="['{{ table.module_name }}:{{ table.name }}:export']"
      >导出</el-button>
      <el-button
        type="info"
        plain
        icon="Upload"
        @click="handleImport"
        v-hasPermi="['{{ table.module_name }}:{{ table.name }}:import']"
      >导入</el-button>
    </hbt-toolbar>

    <!-- 表格区域 -->
    <hbt-table
      v-loading="loading"
      :data="tableData"
      @selection-change="handleSelectionChange"
    >
      <el-table-column type="selection" width="55" align="center" />
      {{~ for column in table.columns ~}}
      {{~ if column.is_table ~}}
      <el-table-column
        prop="{{ column.name }}"
        label="{{ column.comment }}"
        {{~ if column.type == 'boolean' ~}}
        width="80"
        {{~ else if column.type == 'date' || column.type == 'datetime' ~}}
        width="160"
        {{~ else if column.type == 'number' ~}}
        width="120"
        {{~ else if column.type == 'string' && column.length > 100 ~}}
        width="200"
        {{~ end ~}}
      >
        {{~ if column.type == 'boolean' ~}}
        <template #default="{ row }">
          <el-tag :type="row.{{ column.name }} ? 'success' : 'danger'">
            {{ row.{{ column.name }} ? '是' : '否' }}
          </el-tag>
        </template>
        {{~ else if column.type == 'enum' ~}}
        <template #default="{ row }">
          {{~ for option in column.options ~}}
          <el-tag v-if="row.{{ column.name }} === {{ option.value }}" :type="'{{ option.type }}'">
            {{ option.label }}
          </el-tag>
          {{~ end ~}}
        </template>
        {{~ end ~}}
      </el-table-column>
      {{~ end ~}}
      {{~ end ~}}
      <hbt-operation
        label="操作"
        width="150"
        :buttons="[
          {
            label: '查看',
            icon: 'View',
            type: 'info',
            onClick: handleDetail,
            permission: '{{ table.module_name }}:{{ table.name }}:query'
          },
          {
            label: '修改',
            icon: 'Edit',
            type: 'primary',
            onClick: handleUpdate,
            permission: '{{ table.module_name }}:{{ table.name }}:edit'
          },
          {
            label: '删除',
            icon: 'Delete',
            type: 'danger',
            onClick: handleDelete,
            permission: '{{ table.module_name }}:{{ table.name }}:remove'
          }
        ]"
      />
    </hbt-table>

    <!-- 分页区域 -->
    <hbt-pagination
      v-show="total > 0"
      :total="total"
      v-model:page="queryParams.pageIndex"
      v-model:limit="queryParams.pageSize"
      @pagination="getList"
    />

    <!-- 添加或修改对话框 -->
    <hbt-modal
      :title="title"
      v-model="open"
      width="500px"
      @submit="submitForm"
    >
      <{{ pascal_case table.table_name }}Form
        ref="formRef"
        v-model="form"
        :rules="rules"
      />
    </hbt-modal>

    <!-- 详情对话框 -->
    <hbt-modal
      title="查看{{ table.comment }}"
      v-model="detailOpen"
      width="800px"
    >
      <{{ pascal_case table.table_name }}Detail
        v-if="detailOpen"
        :id="detailId"
      />
    </hbt-modal>

    <!-- 导入对话框 -->
    <hbt-modal
      title="导入{{ table.comment }}"
      v-model="importOpen"
      width="400px"
      @submit="submitFileForm"
    >
      <el-upload
        ref="uploadRef"
        :limit="1"
        accept=".xlsx, .xls"
        :headers="upload.headers"
        :action="upload.url"
        :disabled="upload.isUploading"
        :on-progress="handleFileUploadProgress"
        :on-success="handleFileSuccess"
        :auto-upload="false"
        drag
      >
        <el-icon class="el-icon--upload"><upload-filled /></el-icon>
        <div class="el-upload__text">
          将文件拖到此处，或<em>点击上传</em>
        </div>
        <template #tip>
          <div class="el-upload__tip text-center">
            <div class="el-upload__tip">
              <el-checkbox v-model="upload.updateSupport" />是否更新已经存在的{{ table.comment }}数据
            </div>
            <span>仅允许导入xls、xlsx格式文件。</span>
            <el-link type="primary" :underline="false" style="font-size:12px;vertical-align: baseline;" @click="importTemplate">下载模板</el-link>
          </div>
        </template>
      </el-upload>
    </hbt-modal>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { UploadFilled } from '@element-plus/icons-vue'
import { getToken } from '@/utils/auth'
import {
  getPagedList,
  getById,
  create,
  update,
  remove,
  exportData,
  importData,
  importTemplate
} from '@/api/{{ table.module_name }}/{{ table.name }}'
import type {
  {{ pascal_case table.table_name }},
  {{ pascal_case table.table_name }}Query,
  {{ pascal_case table.table_name }}Create,
  {{ pascal_case table.table_name }}Update
} from '@/types/{{ table.module_name }}/{{ table.name }}'
import {{ pascal_case table.table_name }}Form from './components/{{ pascal_case table.table_name }}Form.vue'
import {{ pascal_case table.table_name }}Detail from './components/{{ pascal_case table.table_name }}Detail.vue'

// 遮罩层
const loading = ref(false)
// 选中数组
const ids = ref<number[]>([])
// 非单个禁用
const single = ref(true)
// 非多个禁用
const multiple = ref(true)
// 显示搜索条件
const showSearch = ref(true)
// 总条数
const total = ref(0)
// 表格数据
const tableData = ref<{{ pascal_case table.table_name }}[]>([])
// 弹出层标题
const title = ref('')
// 是否显示弹出层
const open = ref(false)
// 是否显示导入弹出层
const importOpen = ref(false)
// 表单参数
const form = ref<{{ pascal_case table.table_name }}>({})
// 表单校验
const rules = ref({
  {{~ for column in table.columns ~}}
  {{~ if column.is_form && column.is_required ~}}
  {{ column.name }}: [
    { required: true, message: '{{ column.comment }}不能为空', trigger: 'blur' }
  ],
  {{~ end ~}}
  {{~ end ~}}
})

// 上传参数
const upload = reactive({
  // 是否禁用上传
  isUploading: false,
  // 设置上传的请求头部
  headers: { Authorization: 'Bearer ' + getToken() },
  // 上传的地址
  url: import.meta.env.VITE_APP_BASE_API + '/{{ table.module_name }}/{{ table.name }}/importData',
  // 是否更新已经存在的{{ table.comment }}数据
  updateSupport: false
})

// 查询参数
const queryParams = reactive<{{ pascal_case table.table_name }}Query>({
  pageIndex: 1,
  pageSize: 10,
  {{~ for column in table.columns ~}}
  {{~ if column.is_query ~}}
  {{ column.name }}: undefined,
  {{~ end ~}}
  {{~ end ~}}
})

// 表单ref
const formRef = ref()
// 上传ref
const uploadRef = ref()

// 是否显示详情弹出层
const detailOpen = ref(false)
// 详情ID
const detailId = ref<number>()

/** 查询{{ table.comment }}列表 */
const getList = async () => {
  loading.value = true
  try {
    const res = await getPagedList(queryParams)
    tableData.value = res.data.items
    total.value = res.data.total
  } finally {
    loading.value = false
  }
}

/** 取消按钮 */
const cancel = () => {
  open.value = false
  reset()
}

/** 表单重置 */
const reset = () => {
  form.value = {}
  formRef.value?.resetFields()
}

/** 搜索按钮操作 */
const handleQuery = () => {
  queryParams.pageIndex = 1
  getList()
}

/** 重置按钮操作 */
const resetQuery = () => {
  queryParams.pageIndex = 1
  queryParams.pageSize = 10
  {{~ for column in table.columns ~}}
  {{~ if column.is_query ~}}
  queryParams.{{ column.name }} = undefined
  {{~ end ~}}
  {{~ end ~}}
  getList()
}

/** 多选框选中数据 */
const handleSelectionChange = (selection: {{ pascal_case table.table_name }}[]) => {
  ids.value = selection.map(item => item.id)
  single.value = selection.length !== 1
  multiple.value = !selection.length
}

/** 新增按钮操作 */
const handleAdd = () => {
  reset()
  open.value = true
  title.value = '添加{{ table.comment }}'
}

/** 修改按钮操作 */
const handleUpdate = async (row?: {{ pascal_case table.table_name }}) => {
  reset()
  const recordId = row?.id || ids.value[0]
  const res = await getById(recordId)
  form.value = res.data
  open.value = true
  title.value = '修改{{ table.comment }}'
}

/** 提交按钮 */
const submitForm = async () => {
  formRef.value?.validate(async (valid: boolean) => {
    if (valid) {
      try {
        if (form.value.recordId) {
          await update(form.value as {{ pascal_case table.table_name }}Update)
          ElMessage.success('修改成功')
        } else {
          await create(form.value as {{ pascal_case table.table_name }}Create)
          ElMessage.success('新增成功')
        }
        open.value = false
        getList()
      } catch (error) {
        console.error(error)
      }
    }
  })
}

/** 删除按钮操作 */
const handleDelete = (row?: {{ pascal_case table.table_name }}) => {
  const idList = row?.recordId ? [row.recordId] : ids.value
  ElMessageBox.confirm('是否确认删除{{ table.comment }}编号为"' + idList.join(',') + '"的数据项?', '警告', {
    confirmButtonText: '确定',
    cancelButtonText: '取消',
    type: 'warning'
  }).then(async () => {
    await remove(idList)
    ElMessage.success('删除成功')
    getList()
  })
}

/** 导出按钮操作 */
const handleExport = async () => {
  try {
    await exportData(queryParams)
    ElMessage.success('导出成功')
  } catch (error) {
    console.error(error)
  }
}

/** 导入按钮操作 */
const handleImport = () => {
  importOpen.value = true
}

/** 下载模板操作 */
const importTemplate = async () => {
  try {
    await importTemplate()
    ElMessage.success('下载成功')
  } catch (error) {
    console.error(error)
  }
}

/** 文件上传中处理 */
const handleFileUploadProgress = (event: any) => {
  upload.isUploading = true
}

/** 文件上传成功处理 */
const handleFileSuccess = (response: any) => {
  upload.isUploading = false
  if (response.code === 200) {
    importOpen.value = false
    ElMessage.success('导入成功')
    getList()
  } else {
    ElMessage.error(response.msg)
  }
}

/** 提交上传文件 */
const submitFileForm = () => {
  uploadRef.value?.submit()
}

/** 查看详情操作 */
const handleDetail = (row: {{ pascal_case table.table_name }}) => {
  detailId.value = row.recordId
  detailOpen.value = true
}

onMounted(() => {
  getList()
})
</script>

<style scoped>
.app-container {
  padding: 20px;
}

.text-center {
  text-align: center;
}
</style> 