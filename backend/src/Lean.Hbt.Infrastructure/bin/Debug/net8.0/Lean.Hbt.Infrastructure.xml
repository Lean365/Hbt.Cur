<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lean.Hbt.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler">
            <summary>
            JWT令牌处理器实现
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler._configuration">
            <summary>
            配置接口
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Lean.Hbt.Domain.IServices.Admin.IHbtLocalizationService)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置接口</param>
            <param name="localizationService">本地化服务</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.GenerateAccessTokenAsync(Lean.Hbt.Domain.Entities.Identity.HbtUser)">
            <summary>
            生成访问令牌
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.GenerateRefreshTokenAsync">
            <summary>
            生成刷新令牌
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.ValidateAccessToken(System.String)">
            <summary>
            验证访问令牌
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.ValidateRefreshToken(System.String)">
            <summary>
            验证刷新令牌
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Authentication.HbtJwtHandler.GetUserIdFromToken(System.String)">
            <summary>
            从令牌中获取用户ID
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager">
            <summary>
            缓存配置管理器
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtCacheOptions},Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager.GetCurrentOptionsAsync">
            <summary>
            获取当前配置
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager.UpdateOptionsFromDatabaseAsync">
            <summary>
            从数据库更新配置
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtCacheFactory">
            <summary>
            缓存工厂实现
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Caching.HbtCacheFactory.Memory">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Caching.HbtCacheFactory.Redis">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtCacheFactory.#ctor(Lean.Hbt.Domain.IServices.Caching.IHbtMemoryCache,Lean.Hbt.Domain.IServices.Caching.IHbtRedisCache)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache">
            <summary>
            内存缓存实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Lean.Hbt.Infrastructure.Caching.HbtCacheConfigManager)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            设置缓存
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.Exists(System.String)">
            <summary>
            判断缓存是否存在
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.SearchKeys(System.String)">
            <summary>
            根据模式搜索键
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtMemoryCache.GetOrAdd``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            获取或添加缓存
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtNullRedisCache">
            <summary>
            Redis缓存空实现
            </summary>
            <remarks>
            当Redis未配置时使用此实现，所有操作都返回空或默认值
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtNullRedisCache.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            设置缓存（空实现）
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtNullRedisCache.GetAsync``1(System.String)">
            <summary>
            获取缓存（空实现）
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtNullRedisCache.RemoveAsync(System.String)">
            <summary>
            移除缓存（空实现）
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtNullRedisCache.ExistsAsync(System.String)">
            <summary>
            判断缓存是否存在（空实现）
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtNullRedisCache.SearchKeysAsync(System.String)">
            <summary>
            根据模式搜索键（空实现）
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Caching.HbtRedisCache">
            <summary>
            Redis缓存实现
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Caching.HbtRedisCache._cache">
            <summary>
            分布式缓存接口
            </summary>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Caching.HbtRedisCache._connection">
            <summary>
            连接到Redis服务器
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,StackExchange.Redis.ConnectionMultiplexer)">
            <summary>
            构造函数
            </summary>
            <param name="cache">分布式缓存接口</param>
            <param name="connection">连接到Redis服务器</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            设置缓存
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="expiry">过期时间</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.GetAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <returns>缓存值，不存在返回默认值</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.RemoveAsync(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">缓存键</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.ExistsAsync(System.String)">
            <summary>
            判断缓存是否存在
            </summary>
            <param name="key">缓存键</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Caching.HbtRedisCache.SearchKeysAsync(System.String)">
            <summary>
            根据模式搜索键
            </summary>
            <param name="pattern">搜索模式</param>
            <returns>匹配的键列表</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.#ctor(Microsoft.Extensions.Options.IOptions{SqlSugar.ConnectionConfig},Lean.Hbt.Domain.IServices.IHbtLogger)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.Client">
            <summary>
            获取数据库客户端
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.BeginTran">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.CommitTran">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.RollbackTran">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.InitializeAsync">
            <summary>
            初始化数据库
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.GetTableNameFromSql(System.String)">
            <summary>
            获取数据库中的列信息
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.GetChangeTypeFromSql(System.String)">
             <summary>
            
             </summary>
             <param name="sql"></param>
             <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.SetTenantId">
            <summary>
            设置租户ID
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext.AddTenantFilter">
            <summary>
            添加租户过滤器
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Data.Contexts.HbtTenantContext">
            <summary>
            租户上下文,用于存储当前租户信息
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Data.Contexts.HbtTenantContext.CurrentTenantId">
            <summary>
            获取当前租户ID
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Contexts.HbtTenantContext.Clear">
            <summary>
            清除当前租户信息
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed">
            <summary>
            数据库种子数据初始化
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.#ctor(Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext,Lean.Hbt.Domain.IServices.IHbtLogger,Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig},Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtTranslation},Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtLanguage},Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Identity.HbtMenu})">
            <summary>
            构造函数
            </summary>
            <param name="context">数据库上下文</param>
            <param name="logger">日志记录器</param>
            <param name="repository">系统配置仓储</param>
            <param name="translationRepository">翻译仓储</param>
            <param name="languageRepository">语言仓储</param>
            <param name="menuRepository">菜单仓储</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeAsync">
            <summary>
            初始化种子数据
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeTenantAsync">
            <summary>
            初始化租户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeRoleAsync">
            <summary>
            初始化角色
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeUserAsync">
            <summary>
            初始化用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeDeptAsync">
            <summary>
            初始化部门
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializePostAsync">
            <summary>
            初始化岗位
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeSysConfigAsync">
            <summary>
            初始化系统配置
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeCaptchaConfigAsync">
            <summary>
            初始化验证码配置
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeLanguageAsync">
            <summary>
            初始化语言配置
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeTranslationAsync">
            <summary>
            初始化翻译数据
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Data.Seeds.HbtDbSeed.InitializeMenuAsync">
            <summary>
            初始化菜单数据
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtCsrfExtensions">
            <summary>
            CSRF防护中间件扩展
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtCsrfExtensions.UseHbtCsrf(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用CSRF防护中间件
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtLocalizationExtensions">
            <summary>
            本地化扩展方法
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtLocalizationExtensions.AddHbtLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加本地化服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtLocalizationExtensions.UseHbtLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用本地化服务
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtPermExtensions">
            <summary>
            权限中间件扩展方法
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtPermExtensions.UseHbtPerm(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用权限中间件
            </summary>
            <param name="app">应用程序构建器</param>
            <returns>应用程序构建器</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtRateLimitExtensions">
            <summary>
            限流中间件扩展方法
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtRateLimitExtensions.UseHbtRateLimit(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用限流中间件
            </summary>
            <param name="app">应用程序构建器</param>
            <returns>应用程序构建器</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions">
            <summary>
            服务集合扩展类
            </summary>
            <remarks>
            此类用于集中管理和注册系统所需的所有服务，包括：
            1. 领域层服务 - 包含核心业务逻辑
            2. 应用层服务 - 处理用户交互和业务流程
            3. 基础设施服务 - 提供技术支持和底层实现
            4. 工作流服务 - 处理业务流程自动化
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.GetCurrentUserName">
            <summary>
            获取当前用户名
            </summary>
            <returns>当前用户名，如果未登录则返回null</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddDomainServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加领域层服务
            </summary>
            <remarks>
            注册领域层相关的所有服务，包括：
            1. 仓储服务 - 数据访问抽象
            2. 安全服务 - 登录和密码策略
            3. 会话服务 - 用户会话管理
            4. 验证服务 - 验证码和OAuth认证
            5. 日志服务 - 系统日志管理
            6. 本地化服务 - 多语言支持
            </remarks>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加应用层服务
            </summary>
            <remarks>
            注册应用层相关的所有服务，包括：
            1. 身份认证服务 - 用户认证和授权
            2. 审计日志服务 - 系统操作记录
            3. 系统管理服务 - 系统配置和维护
            4. 实时通信服务 - 即时消息和通知
            5. 工作流服务 - 业务流程管理
            </remarks>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddSecurityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加安全服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddCacheServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加缓存服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddLogServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加日志服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddLocalizationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加本地化服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddIdentityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加身份认证服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddAdminServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加管理服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddAuditServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加审计服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddRealTimeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加实时服务
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtServiceCollectionExtensions.AddInfrastructure(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加基础设施服务
            </summary>
            <remarks>
            注册基础设施层相关的所有服务，包括：
            1. 数据库上下文 - 数据访问
            2. 认证服务 - JWT认证
            3. 缓存服务 - Redis和内存缓存
            4. 消息服务 - SignalR实时通信
            5. 日志服务 - 系统日志记录
            </remarks>
            <param name="services">服务集合</param>
            <param name="configuration">配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtSessionSecurityExtensions">
            <summary>
            会话安全中间件扩展
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtSessionSecurityExtensions.UseHbtSessionSecurity(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用会话安全中间件
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtSqlInjectionExtensions">
            <summary>
            SQL注入防护中间件扩展
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtSqlInjectionExtensions.UseHbtSqlInjection(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用SQL注入防护中间件
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Extensions.HbtWorkflowCollectionExtensions">
            <summary>
            工作流服务扩展方法
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtWorkflowCollectionExtensions.AddWorkflowCacheServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加工作流缓存服务
            </summary>
            <remarks>
            注册工作流相关的缓存服务，包括：
            1. 内存缓存服务
            2. 工作流缓存服务
            </remarks>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Extensions.HbtWorkflowCollectionExtensions.AddWorkflowServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加工作流服务
            </summary>
            <remarks>
            注册工作流相关的所有服务,包括:
            1. 工作流引擎
            2. 工作流定义服务
            3. 工作流实例服务
            4. 工作流节点服务
            5. 工作流任务服务
            6. 工作流历史服务
            7. 工作流活动服务
            8. 各类节点执行器
            9. 表达式引擎
            10. 审批人解析器
            </remarks>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Logging.HbtNLogger">
            <summary>
            NLog日志实现
            </summary>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Logging.HbtNLogger._logger">
            <summary>
            NLog日志记录器
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Debug(System.String)">
            <summary>
            记录调试级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Debug(System.String,System.Object[])">
            <summary>
            记录带参数的调试级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Info(System.String)">
            <summary>
            记录信息级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Info(System.String,System.Object[])">
            <summary>
            记录带参数的信息级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Warn(System.String)">
            <summary>
            记录警告级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Warn(System.String,System.Object[])">
            <summary>
            记录带参数的警告级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Error(System.String)">
            <summary>
            记录错误级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Error(System.String,System.Exception)">
            <summary>
            记录带异常的错误级别日志
            </summary>
            <param name="message">日志消息</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Error(System.String,System.Object[])">
            <summary>
            记录带参数的错误级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Fatal(System.String)">
            <summary>
            记录致命错误级别日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Fatal(System.String,System.Exception)">
            <summary>
            记录带异常的致命错误级别日志
            </summary>
            <param name="message">日志消息</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Logging.HbtNLogger.Fatal(System.String,System.Object[])">
            <summary>
            记录带参数的致命错误级别日志
            </summary>
            <param name="message">日志消息模板</param>
            <param name="args">参数数组</param>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Middleware.HbtLocalizationMiddleware">
            <summary>
            本地化中间件
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Middleware.HbtLocalizationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{Lean.Hbt.Infrastructure.Middleware.HbtLocalizationMiddleware})">
            <summary>
            构造函数
            </summary>
            <param name="next">请求委托</param>
            <param name="logger">日志服务</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Middleware.HbtLocalizationMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            处理请求
            </summary>
            <param name="context">HTTP上下文</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Middleware.HbtLocalizationMiddleware.ShouldSetLanguage(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查是否需要设置语言
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Middleware.HbtLocalizationMiddleware.GetLanguage(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取语言设置
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Middleware.HbtLocalizationMiddleware.UpdateLanguageCookie(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            更新语言Cookie
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1">
            <summary>
            SqlSugar通用仓储实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.#ctor(SqlSugar.SqlSugarScope)">
            <summary>
            构造函数
            </summary>
            <param name="db">SqlSugar客户端</param>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.SqlSugarClient">
            <summary>
            获取SqlSugar客户端
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.SimpleClient">
            <summary>
            获取SimpleClient对象
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.AsQueryable">
            <summary>
            获取查询对象
            </summary>
            <returns>返回ISugarQueryable查询对象</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetByIdAsync(System.Object)">
            <summary>
            根据主键获取实体
            </summary>
            <param name="id">主键值</param>
            <returns>返回实体对象,如果未找到返回null</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetListAsync">
            <summary>
            获取所有实体列表
            </summary>
            <returns>返回实体列表</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取实体列表
            </summary>
            <param name="condition">查询条件表达式</param>
            <returns>返回符合条件的实体列表</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetPagedListAsync(System.Int32,System.Int32)">
            <summary>
            分页查询所有数据
            </summary>
            <param name="pageIndex">页码(从1开始)</param>
            <param name="pageSize">每页记录数</param>
            <returns>返回分页结果(list:当前页数据,total:总记录数)</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetPagedListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            根据条件分页查询
            </summary>
            <param name="condition">查询条件表达式</param>
            <param name="pageIndex">页码(从1开始)</param>
            <param name="pageSize">每页记录数</param>
            <returns>返回分页结果(list:当前页数据,total:总记录数)</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取第一个实体
            </summary>
            <param name="condition">查询条件</param>
            <returns>实体</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.InsertAsync(`0)">
            <summary>
            新增单个实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.InsertRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增实体
            </summary>
            <param name="entities">实体对象列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.UpdateAsync(`0)">
            <summary>
            更新单个实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.UpdateRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量更新实体
            </summary>
            <param name="entities">实体对象列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.DeleteAsync(System.Object)">
            <summary>
            根据主键删除
            </summary>
            <param name="id">主键值</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.DeleteAsync(`0)">
            <summary>
            删除单个实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.DeleteRangeAsync(System.Collections.Generic.List{System.Object})">
            <summary>
            根据主键批量删除
            </summary>
            <param name="ids">主键值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.DeleteRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量删除实体
            </summary>
            <param name="entities">实体对象列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetUserRolesAsync(System.Int64)">
            <summary>
            获取用户角色列表
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Repositories.HbtRepository`1.GetUserPermissionsAsync(System.Int64)">
            <summary>
            获取用户权限列表
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.Attributes.HbtPermAttribute">
            <summary>
            权限特性
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Security.Attributes.HbtPermAttribute.Title">
            <summary>
            权限编码
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Security.Attributes.HbtPermAttribute.Permission">
            <summary>
            权限编码
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.Attributes.HbtPermAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="permission">权限编码(格式:模块:实体:操作)</param>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.Attributes.HbtLogAttribute">
            <summary>
            日志特性
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Security.Attributes.HbtLogAttribute.Title">
            <summary>
            日志标题
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.Attributes.HbtAuthAttribute">
            <summary>
            认证特性
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtAuditsLog">
            <summary>
            审计日志实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.#ctor(Lean.Hbt.Domain.IServices.IHbtLogger,Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext)">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
            <param name="context"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.LogOperationAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            记录操作日志
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="module"></param>
            <param name="operation"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <param name="result"></param>
            <param name="elapsed"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.LogLoginAsync(System.Int64,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            记录登录日志
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="ipAddress"></param>
            <param name="userAgent"></param>
            <param name="result"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.LogExceptionAsync(System.Int64,System.String,System.String,System.String,System.Exception)">
            <summary>
            记录异常日志
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.GetClientIpAddress">
            <summary>
            获取客户端IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.GetUserAgent">
            <summary>
            获取客户端UserAgent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.Error(System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtAuditsLog.Fatal(System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware">
            <summary>
            验证码中间件
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Lean.Hbt.Domain.IServices.Security.IHbtCaptchaService,Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtCaptchaOptions})">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
            <param name="cache"></param>
            <param name="captchaService"></param>
            <param name="options"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            处理请求
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware.ShouldRequireCaptchaAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查是否需要验证码
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware.ValidateCaptchaAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            验证验证码
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware.IsLoginRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否是登录请求
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware.IsLoginSuccess(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否登录成功
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware.GetLoginFailCountAsync(System.String)">
            <summary>
            获取登录失败次数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaMiddleware.IncrementLoginFailCountAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            增加登录失败次数
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtCaptchaService">
            <summary>
            验证码服务实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtCaptchaOptions},Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig})">
            <summary>
            初始化验证码服务
            </summary>
            <param name="cache">分布式缓存</param>
            <param name="options">验证码配置选项</param>
            <param name="repository">系统配置仓储</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.GenerateSliderAsync">
            <summary>
            生成滑块验证码
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.ValidateSliderAsync(System.String,System.Int32)">
            <summary>
            验证滑块
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.CollectBehaviorDataAsync(System.String,Lean.Hbt.Domain.IServices.Security.BehaviorData)">
            <summary>
            收集行为数据
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.ValidateBehaviorAsync(System.String)">
            <summary>
            验证行为特征
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.GenerateToken">
            <summary>
            生成随机token
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.ImageToBase64``1(SixLabors.ImageSharp.Image{``0})">
            <summary>
            图片转Base64
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.CalculateBehaviorScore(Lean.Hbt.Domain.IServices.Security.BehaviorData)">
            <summary>
            计算行为分数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCaptchaService.CalculateTrackSmoothness(System.Collections.Generic.List{Lean.Hbt.Domain.IServices.Security.Point})">
            <summary>
            计算轨迹平滑度
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtCsrfMiddleware">
            <summary>
            CSRF防护中间件
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCsrfMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtSecurityOptions})">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
            <param name="cache"></param>
            <param name="options"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCsrfMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            调用中间件处理CSRF防护
            </summary>
            <param name="context">HTTP上下文</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCsrfMiddleware.GenerateCsrfToken">
            <summary>
            生成CSRF Token
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCsrfMiddleware.CacheTokenAsync(System.String)">
            <summary>
            缓存Token
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtCsrfMiddleware.ValidateCsrfTokenAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            验证CSRF Token
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy">
            <summary>
            登录限制策略实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger{Lean.Hbt.Infrastructure.Security.HbtLoginPolicy})">
            <summary>
            构造函数
            </summary>
            <param name="cache">缓存服务</param>
            <param name="logger">日志服务</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.ClearUserLoginRestrictions(System.String)">
            <summary>
            清除指定用户的登录限制缓存
            </summary>
            <param name="username">用户名</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.ValidateLoginAttemptAsync(System.String)">
            <summary>
            验证登录尝试
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.ValidateAdminLoginAttemptAsync(System.String)">
            <summary>
            验证管理员登录尝试
            </summary>
            <param name="userName">用户名</param>
            <returns>是否允许登录</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.RecordFailedLoginAsync(System.String)">
            <summary>
            记录登录失败
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.RecordAdminFailedLoginAsync(System.String)">
            <summary>
            记录管理员登录失败
            </summary>
            <param name="userName">用户名</param>
            <returns>任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.RecordSuccessfulLoginAsync(System.String)">
            <summary>
            记录登录成功
            </summary>
            <param name="username">用户名</param>
            <returns>任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.GetRemainingAttemptsAsync(System.String)">
            <summary>
            获取剩余登录尝试次数
            </summary>
            <param name="userName">用户名</param>
            <returns>剩余次数</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtLoginPolicy.GetLockoutRemainingSecondsAsync(System.String)">
            <summary>
            获取账户锁定剩余时间(秒)
            </summary>
            <param name="userName">用户名</param>
            <returns>剩余秒数</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtOAuthService">
            <summary>
            OAuth服务实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtOAuthService.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtOAuthOptions},Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig},System.Net.Http.HttpClient)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="configRepository"></param>
            <param name="httpClient"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtOAuthService.GetOptionsAsync">
            <summary>
            获取配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtOAuthService.GetAuthorizationUrlAsync(System.String,System.String)">
            <summary>
            获取授权地址
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtOAuthService.HandleCallbackAsync(System.String,System.String,System.String)">
            <summary>
            处理OAuth回调
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy">
            <summary>
            密码策略实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtPasswordPolicyOptions},Lean.Hbt.Domain.IServices.Caching.IHbtRedisCache,Lean.Hbt.Infrastructure.Data.Contexts.HbtDbContext)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="cache"></param>
            <param name="context"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.ValidatePasswordComplexity(System.String)">
            <summary>
            验证密码复杂度
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.ValidatePasswordHistoryAsync(System.Int64,System.String)">
            <summary>
            验证密码历史
            </summary>
            <param name="userId"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.RecordPasswordHistoryAsync(System.Int64,System.String)">
            <summary>
            记录密码历史
            </summary>
            <param name="userId"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.ValidatePasswordExpirationAsync(System.Int64)">
            <summary>
            验证密码过期
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPasswordPolicy.GetPasswordExpirationDaysAsync(System.Int64)">
            <summary>
            密码过期天数
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtPermMiddleware">
            <summary>
            权限中间件,用于验证用户是否拥有访问权限
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPermMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next">请求委托</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtPermMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            处理请求
            </summary>
            <param name="context">HTTP上下文</param>
            <returns>异步任务</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtRateLimitMiddleware">
            <summary>
            限流中间件,基于令牌桶算法实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtRateLimitMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next">请求委托</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtRateLimitMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            处理请求
            </summary>
            <param name="context">HTTP上下文</param>
            <returns>异步任务</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtRateLimitMiddleware.TokenBucket">
            <summary>
            令牌桶
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtSessionManager">
            <summary>
            会话管理实现
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.#ctor(Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtSessionOptions},Lean.Hbt.Domain.IServices.Caching.IHbtRedisCache,Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtSysConfig})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="cache"></param>
            <param name="configRepository"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.CreateIdentitySessionAsync(System.String,System.String,System.String,System.String)">
            <summary>
            创建会话 (私有实现)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.CreateServiceSessionAsync(System.String)">
            <summary>
            创建会话 (私有实现)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.GetIdentitySessionInfoAsync(System.String)">
            <summary>
            获取会话信息 (私有实现)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.GetUserIdentitySessionsAsync(System.String)">
            <summary>
            获取用户所有会话 (私有实现)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.Lean#Hbt#Domain#IServices#Identity#IHbtIdentitySessionManager#CreateSessionAsync(System.String,System.String,System.String,System.String)">
            <summary>
            创建会话 (Domain.IServices.Identity.IHbtIdentitySessionManager)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.Lean#Hbt#Domain#IServices#Identity#IHbtIdentitySessionManager#GetSessionInfoAsync(System.String)">
            <summary>
            获取会话信息 (Domain.IServices.Identity.IHbtIdentitySessionManager)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.Lean#Hbt#Domain#IServices#Identity#IHbtIdentitySessionManager#GetUserSessionsAsync(System.String)">
            <summary>
            获取用户所有会话 (Domain.IServices.Identity.IHbtIdentitySessionManager)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.Lean#Hbt#Domain#IServices#SignalR#IHbtSignalRSessionManager#CreateSessionAsync(System.String)">
            <summary>
            创建会话 (Domain.IServices.SignalR.IHbtSignalRSessionManager)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.Lean#Hbt#Domain#IServices#SignalR#IHbtSignalRSessionManager#SingleSignOutAsync(System.String,System.String)">
            <summary>
            单点登出 (Domain.IServices.SignalR.IHbtSignalRSessionManager)
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.Lean#Hbt#Domain#IServices#Identity#IHbtIdentitySessionManager#UpdateSessionAccessTimeAsync(System.String)">
            <summary>
            更新会话访问时间
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.Lean#Hbt#Domain#IServices#Identity#IHbtIdentitySessionManager#RemoveSessionAsync(System.String)">
            <summary>
            移除会话
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.Lean#Hbt#Domain#IServices#Identity#IHbtIdentitySessionManager#RemoveUserSessionsAsync(System.String)">
            <summary>
            移除用户所有会话
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.SaveSessionInfoAsync(System.String,System.String,Lean.Hbt.Domain.Models.Identity.HbtIdentitySessionInfo)">
            <summary>
            保存会话信息
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.SaveServiceSessionInfoAsync(System.String,System.String,Lean.Hbt.Domain.IServices.SignalR.HbtSignalRSessionInfo)">
            <summary>
            保存服务会话信息
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.AddToUserSessionsAsync(System.String,System.String)">
            <summary>
            添加到用户会话列表
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.RemoveFromUserSessionsAsync(System.String,System.String)">
            <summary>
            从用户会话列表移除
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.GetUserSessionIdsAsync(System.String)">
            <summary>
            获取用户会话ID列表
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.CleanupExpiredSessionsAsync">
            <summary>
            清理过期会话
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionManager.GetAllSessionsAsync">
            <summary>
            获取所有会话
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware">
            <summary>
            会话安全中间件,用于防止会话劫持
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtSecurityOptions})">
            <summary>
            初始化会话安全中间件
            </summary>
            <param name="next">请求委托</param>
            <param name="cache">分布式缓存</param>
            <param name="options">安全配置选项</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            调用中间件处理会话安全
            </summary>
            <param name="context">HTTP上下文</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware.GenerateSessionCredentials">
            <summary>
            生成会话凭证
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware.GenerateSecureToken">
            <summary>
            生成安全Token
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware.ValidateSessionAsync(System.String,System.String)">
            <summary>
            验证会话
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware.DetectSessionHijackingAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            检测会话劫持
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware.UpdateSessionStateAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            更新会话状态
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSessionSecurityMiddleware.GetClientInfo(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取客户端信息
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Security.HbtSqlInjectionMiddleware">
            <summary>
            SQL注入防护中间件
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSqlInjectionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Lean.Hbt.Common.Options.HbtSecurityOptions})">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
            <param name="options"></param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSqlInjectionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            调用中间件
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSqlInjectionMiddleware.ShouldSkipSqlInjectionCheck(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查是否需要跳过SQL注入检查
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Security.HbtSqlInjectionMiddleware.ContainsSqlInjection(System.String)">
            <summary>
            检查是否包含SQL注入攻击
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Services.HbtLocalizationService">
            <summary>
            本地化服务实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Lean.Hbt.Domain.IServices.Admin.IHbtTranslationCache,Microsoft.Extensions.Logging.ILogger{Lean.Hbt.Infrastructure.Services.HbtLocalizationService},Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.L(System.String,System.Object[])">
            <summary>
            获取当前语言的翻译值
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.L(System.String,System.String,System.Object[])">
            <summary>
            获取指定语言的翻译值
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.CurrentLanguage">
            <summary>
            获取当前语言代码
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.GetSupportedLanguagesAsync">
            <summary>
            获取支持的语言列表
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.SetLanguage(System.String)">
            <summary>
            设置当前语言
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.ReloadTranslationsAsync">
            <summary>
            重新加载翻译
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.GetLocalizedStringAsync(System.String,System.Object[])">
            <summary>
            获取本地化字符串
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.GetCurrentCulture">
            <summary>
            获取当前文化信息
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.SetCurrentCulture(System.Globalization.CultureInfo)">
            <summary>
            设置当前文化信息
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLocalizationService.RefreshLocalizationCacheAsync">
            <summary>
            刷新本地化缓存
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Services.HbtLoginPolicyInitializer">
            <summary>
            登录策略初始化服务
            </summary>
            <remarks>
            本服务负责在应用程序启动时执行以下操作：
            1. 清除所有登录限制相关的缓存
            2. 重置所有用户的登录尝试计数
            3. 清除所有验证码要求标记
            </remarks>
        </member>
        <member name="F:Lean.Hbt.Infrastructure.Services.HbtLoginPolicyInitializer.LOGIN_ATTEMPT_PREFIX">
            <summary>
            缓存键前缀常量
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLoginPolicyInitializer.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Lean.Hbt.Infrastructure.Services.HbtLoginPolicyInitializer})">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供者</param>
            <param name="logger">日志服务</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLoginPolicyInitializer.StartAsync(System.Threading.CancellationToken)">
            <summary>
            启动时执行
            </summary>
            <param name="cancellationToken">取消令牌</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtLoginPolicyInitializer.StopAsync(System.Threading.CancellationToken)">
            <summary>
            停止时执行
            </summary>
            <param name="cancellationToken">取消令牌</param>
            <returns>异步任务</returns>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Services.HbtTranslationCache">
            <summary>
            翻译缓存服务实现
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtTranslationCache.#ctor(Lean.Hbt.Domain.Repositories.IHbtRepository{Lean.Hbt.Domain.Entities.Admin.HbtTranslation},Microsoft.Extensions.Logging.ILogger{Lean.Hbt.Infrastructure.Services.HbtTranslationCache})">
            <summary>
            构造函数
            </summary>
            <param name="translationRepository">翻译仓储</param>
            <param name="logger">日志服务</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtTranslationCache.GetTranslation(System.String,System.String)">
            <summary>
            获取指定语言和键的翻译
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtTranslationCache.InitializeTranslations">
            <summary>
            初始化翻译数据
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtTranslationCache.ReloadAsync">
            <summary>
            重新加载翻译数据
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Services.HbtTranslationCache.GetSupportedLanguagesAsync">
            <summary>
            获取支持的语言列表
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Services.ConcurrentHashSet`1">
            <summary>
            线程安全的HashSet实现
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub">
            <summary>
            SignalR实时通信Hub
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-24
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub.#ctor(Lean.Hbt.Domain.IServices.SignalR.IHbtSignalRUserService)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub.OnConnectedAsync">
            <summary>
            连接建立时
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub.OnDisconnectedAsync(System.Exception)">
            <summary>
            连接断开时
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub.JoinGroup(System.String)">
            <summary>
            加入群组
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub.LeaveGroup(System.String)">
            <summary>
            离开群组
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub.SendToUser(System.Int64,System.String)">
            <summary>
            发送消息给指定用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub.SendToGroup(System.String,System.String)">
            <summary>
            发送消息给指定群组
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier">
            <summary>
            SignalR消息通知服务
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-24
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{Lean.Hbt.Infrastructure.SignalR.HbtSignalRHub,Lean.Hbt.Domain.IServices.SignalR.IHbtSignalRClient},Lean.Hbt.Domain.IServices.SignalR.IHbtSignalRUserService)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.NotifyUserAsync(System.Int64,System.String,Lean.Hbt.Common.Enums.HbtMessageType)">
            <summary>
            通知指定用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.NotifyGroupAsync(System.String,System.String,Lean.Hbt.Common.Enums.HbtMessageType)">
            <summary>
            通知指定群组
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.NotifyAllAsync(System.String,Lean.Hbt.Common.Enums.HbtMessageType)">
            <summary>
            通知所有用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRMessageNotifier.NotifyTenantAsync(System.Int64,System.String,Lean.Hbt.Common.Enums.HbtMessageType)">
            <summary>
            通知指定租户的所有用户
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.SignalR.HbtSignalRUserService">
            <summary>
            SignalR用户服务实现
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-24
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRUserService.#ctor(Lean.Hbt.Domain.IServices.Caching.IHbtRedisCache)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRUserService.SaveOnlineUserAsync(Lean.Hbt.Domain.Models.SignalR.HbtOnlineUser)">
            <summary>
            保存在线用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRUserService.DeleteOnlineUserAsync(System.String)">
            <summary>
            删除在线用户
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRUserService.GetConnectionIdsAsync(System.Int64)">
            <summary>
            获取用户的连接ID列表
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.SignalR.HbtSignalRUserService.GetGroupConnectionIdsAsync(System.Int64)">
            <summary>
            获取租户组的连接ID列表
            </summary>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Swagger.ApiModuleAttribute">
            <summary>
            API模块特性
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Swagger.ApiModuleAttribute.Name">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:Lean.Hbt.Infrastructure.Swagger.ApiModuleAttribute.Description">
            <summary>
            模块描述
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Swagger.ApiModuleAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">模块名称</param>
            <param name="description">模块描述</param>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Swagger.HbtSwaggerSetup">
            <summary>
            Swagger配置
            </summary>
            <remarks>
            创建者: Lean365
            创建时间: 2024-01-16
            </remarks>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Swagger.HbtSwaggerSetup.AddHbtSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加Swagger服务
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Swagger.HbtSwaggerSetup.UseHbtSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用Swagger中间件
            </summary>
            <param name="app">应用程序构建器</param>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Swagger.SwaggerDocumentFilter">
            <summary>
            Swagger文档过滤器
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Swagger.SwaggerDocumentFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            应用文档过滤器
            </summary>
            <param name="swaggerDoc">Swagger文档</param>
            <param name="context">文档过滤器上下文</param>
        </member>
        <member name="T:Lean.Hbt.Infrastructure.Swagger.SwaggerOperationFilter">
            <summary>
            Swagger操作过滤器
            </summary>
        </member>
        <member name="M:Lean.Hbt.Infrastructure.Swagger.SwaggerOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            应用操作过滤器
            </summary>
            <param name="swaggerDoc">Swagger文档</param>
            <param name="context">文档过滤器上下文</param>
        </member>
    </members>
</doc>
