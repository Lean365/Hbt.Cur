---
description: 
globs: 
alwaysApply: false
---
---
type: manual
description: 手动触发的代码生成规范
globs: 
  - "**/*.cs"
  - "**/*.ts"
  - "**/*.vue"
  - "**/*.js"
  - "**/*.json"
  - "**/*.md"
rules:
  # 手动生成的规则约束 - 适用于需要人工确认的代码生成
  naming:
    classes:
      pattern: "^Hbt[A-Z][a-zA-Z0-9]*$"
      description: "类名必须以Hbt开头，使用PascalCase"
    interfaces:
      pattern: "^IHbt[A-Z][a-zA-Z0-9]*$"
      description: "接口必须以IHbt开头，使用PascalCase"
  documentation:
    fileHeader:
      required: true
      template: |
        //===================================================================
        // 项目名 : Lean.Hbt
        // 文件名 : {filename}
        // 创建者 : {author}
        // 创建时间: {date}
        // 版本号 : {version}
        // 描述    : {description}
        //===================================================================
---
type: always
description: 始终执行的代码生成规范
globs: 
  - "**/*.cs"
  - "**/*.ts"
  - "**/*.vue"
  - "**/*.js"
  - "**/*.json"
  - "**/*.md"
rules:
  # 自动执行的规则约束 - 适用于所有代码生成场景
  naming:
    methods:
      pattern: "^[A-Z][a-zA-Z0-9]*(?:Async)?$"
      description: "方法名使用PascalCase，异步方法以Async结尾"
    properties:
      pattern: "^[A-Z][a-zA-Z0-9]*$"
      description: "属性名使用PascalCase"
    variables:
      pattern: "^[a-z][a-zA-Z0-9]*$"
      description: "变量名使用camelCase"
  organization:
    backend:
      namespaces:
        root: "Lean.Hbt"
        layers:
          - "Domain"
          - "Application"
          - "Infrastructure"
          - "WebApi"
          - "Common"
---
type: auto_attached
description: 自动附加的代码生成规范
globs: 
  - "**/*.cs"
  - "**/*.ts"
  - "**/*.vue"
  - "**/*.js"
  - "**/*.json"
  - "**/*.md"
rules:
  # 自动附加的规则约束 - 适用于需要自动补充的代码
  patterns:
    backend:
      required:
        - "依赖注入"
        - "仓储模式"
        - "工作单元模式"
    frontend:
      required:
        - "组合式API"
        - "状态管理"
  testing:
    backend:
      naming:
        pattern: "^[A-Z][a-zA-Z0-9]*Tests$"
        description: "测试类名必须以Tests结尾"
      methods:
        pattern: "^(Should|When|Given)[A-Z][a-zA-Z0-9]*$"
        description: "测试方法名必须以Should、When或Given开头"
---
type: agent_requested
description: 代理请求的代码生成规范
globs: 
  - "**/*.cs"
  - "**/*.ts"
  - "**/*.vue"
  - "**/*.js"
  - "**/*.json"
  - "**/*.md"
rules:
  # 代理请求的规则约束 - 适用于需要AI代理协助的代码生成
  security:
    backend:
      required:
        - "JWT认证"
        - "RBAC授权"
        - "SQL注入防护"
        - "XSS防护"
        - "CSRF防护"
    frontend:
      required:
        - "XSS防护"
        - "CSRF防护"
        - "HTTPS"
  performance:
    backend:
      required:
        - "缓存策略"
        - "数据库优化"
        - "异步处理"
    frontend:
      required:
        - "路由懒加载"
        - "组件按需加载"
        - "资源优化"

# 项目规范

## 1. 命名规范

### 1.1 后端命名规范
- 类名：必须以 Hbt 开头，使用 PascalCase
- 接口：必须以 IHbt 开头，使用 PascalCase
- 方法：使用 PascalCase，异步方法以 Async 结尾
- 属性：使用 PascalCase
- 变量：使用 camelCase
- 常量：全大写，下划线分隔

### 1.2 前端命名规范
- 组件名：使用 PascalCase
- 文件名：使用 kebab-case
- 变量名：使用 camelCase
- 常量：全大写，下划线分隔
- CSS 类名：使用 kebab-case

## 2. 代码组织

### 2.1 后端结构
```
backend/
├── src/
│   ├── Domain/           # 领域层
│   │   ├── Entities/     # 实体
│   │   ├── IServices/    # 服务接口
│   │   ├── Models/       # 领域模型
│   │   └── Repositories/ # 仓储接口
│   ├── Application/      # 应用层
│   │   ├── Services/     # 应用服务
│   │   ├── Dtos/        # 数据传输对象
│   │   └── Mappers/     # 对象映射
│   ├── Infrastructure/   # 基础设施层
│   │   ├── Data/        # 数据访问
│   │   ├── Security/    # 安全相关
│   │   ├── Logging/     # 日志
│   │   └── Caching/     # 缓存
│   └── WebApi/          # 接口层
│       ├── Controllers/  # 控制器
│       ├── Filters/     # 过滤器
│       └── Middlewares/ # 中间件
```

### 2.2 前端结构
```
frontend/
├── src/
│   ├── api/            # API 接口
│   ├── assets/         # 静态资源
│   ├── components/     # 公共组件
│   ├── composables/    # 组合式函数
│   ├── config/        # 配置文件
│   ├── layouts/       # 布局组件
│   ├── router/        # 路由配置
│   ├── store/         # 状态管理
│   ├── styles/        # 样式文件
│   ├── types/         # 类型定义
│   ├── utils/         # 工具函数
│   └── views/         # 页面组件
```

## 3. 文档规范

### 3.1 代码注释
```csharp
//===================================================================
// 项目名 : Lean.Hbt
// 文件名 : {filename}
// 创建者 : {author}
// 创建时间: {date}
// 版本号 : {version}
// 描述    : {description}
//===================================================================

/// <summary>
/// 类描述
/// </summary>
/// <remarks>
/// 详细说明
/// </remarks>
public class Example
{
    /// <summary>
    /// 属性描述
    /// </summary>
    public string Property { get; set; }

    /// <summary>
    /// 方法描述
    /// </summary>
    /// <param name="param">参数描述</param>
    /// <returns>返回值描述</returns>
    public async Task<string> MethodAsync(string param)
    {
        // 实现代码
    }
}
```

### 3.2 API 文档
- 所有 API 接口必须添加 Swagger 注释
- 必须包含接口描述、参数说明、返回值说明
- 必须标注接口的权限要求

## 4. 编码规范

### 4.1 后端规范
- 使用异步编程模式
- 使用依赖注入
- 统一异常处理
- 使用日志记录关键操作
- 使用缓存优化性能
- 遵循 SOLID 原则
- 使用设计模式解决常见问题

### 4.2 前端规范
- 使用 TypeScript
- 使用组合式 API
- 使用 Pinia 进行状态管理
- 使用 Ant Design Vue 组件库
- 遵循 Vue 3 最佳实践
- 使用 ESLint 和 Prettier 保持代码风格

## 5. 测试规范

### 5.1 后端测试
- 单元测试覆盖核心业务逻辑
- 集成测试覆盖 API 接口
- 测试类名以 `Tests` 结尾
- 测试方法名以 `Should`、`When` 或 `Given` 开头

### 5.2 前端测试
- 组件单元测试
- 页面集成测试
- 使用 Vitest 作为测试框架
- 使用 Vue Test Utils 测试组件

## 6. Git 规范

### 6.1 分支管理
- 主分支：main
- 开发分支：develop
- 功能分支：feature/*
- 修复分支：bugfix/*
- 发布分支：release/*

### 6.2 提交规范
- feat: 新功能
- fix: 修复问题
- docs: 文档修改
- style: 代码格式修改
- refactor: 代码重构
- test: 测试用例修改
- chore: 其他修改

## 7. 安全规范

### 7.1 后端安全
- 使用 JWT 进行身份认证
- 实现 RBAC 权限控制
- 防止 SQL 注入
- 防止 XSS 攻击
- 防止 CSRF 攻击
- 敏感数据加密存储

### 7.2 前端安全
- 防止 XSS 攻击
- 防止 CSRF 攻击
- 敏感信息加密传输
- 使用 HTTPS
- 实现请求签名验证

## 8. 性能规范

### 8.1 后端性能
- 使用缓存减少数据库访问
- 优化数据库查询
- 使用异步处理耗时操作
- 实现请求限流
- 监控系统性能指标

### 8.2 前端性能
- 路由懒加载
- 组件按需加载
- 图片资源优化
- 使用 CDN 加速
- 实现页面缓存 